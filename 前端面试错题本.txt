1.call和apply的区别？
js中每一个function对象都有一个apply（）和一个call（）方法：
apply：应用某一对象的一个方法，用另一个对象替换当前对象，例如：B.apply（A,arguments）即A对象应用B对象的方法；

call：调用一个对象的一个方法，以另一个对象替换当前对象，例如：B.call（A,args1,args2）;即A对象调用B对象的方法。
它们的共同之处：
都可以用来代替另一个对象调用一个方法；
不同之处在于：
apply：最多只能有两个参数，新的this对象和一个数组argArray。如果给给方法传递多个参数，则把参数都写在这个数组里面，当然，即使只有一个参数，也要写到数组里面。

call：它可以接受多个参数，第一个参数也是一个新的对象，后面则是一串参数列表。

示例如下：
function add(a,b){
  return a+b;  
}
function sub(a,b){
  return a-b;  
}
var a1 = add.apply(sub,[4,2]);　　//sub调用add的方法
var a2 = sub.apply(add,[4,2]);
alert(a1);  //6     
alert(a2);  //2

/*call的用法*/
var a1 = add.call(sub,4,2);

2.性能优化的主要思想之一就是减少dom操作。
3.事件委托是什么？
通俗的来讲，事件就是比如：onclick，onmouseover，onmouseout等，就是事件，委托呢，就是让别人来做。这个事件本来是加在某些元素上的，然而你却加到别人身上来做，完成这个事件。也就是利用冒泡的原理，把事件加到父级上，触发执行效果。优点是：提高性能。
事件委托是利用冒泡的原理来实现的，就是事件从最深的节点开始，然后逐步向上传播事件。
例如：
window.onload = function(){
　　var oUl = document.getElementById("ul1");
　　oUl.onclick = function(ev){
　　　　var ev = ev || window.event; 
　　　　var target = ev.target || ev.srcElement; //event对象提供了一个属性叫target，可以返回事件的目标节点，相当于dom元素，nodeName来获取具体是什么标签名
　　　　if(target.nodeName.toLowerCase() == 'li'){
　 　　　　　　	alert(123);
　　　　　　　  alert(target.innerHTML);
　　　　}
　　}
}

4.html5的语义化标签：header,nav,article,aside,footer,section.音视频元素：audio，video
5.获取用户的地理位置：window.navigator.geolocation；Navigator.appName返回浏览器的名称。
6.js中替换元素节点用replaceChild（）。例如： oldNode.parentNode.replaceChild(newNode,oldNode);
7.403状态码表示拒绝或者禁止访问，404表示请求的网页不存在，503表示服务器超时，200表示服务器已成功处理了请求，202表示服务器已接收请求，但尚未处理，301代表永久性转移，302代表暂时性转移，303表示对于post请求，它表示请求已经被处理，客户端可以接着使用get方法请求，307表示对于post请求，表示请求还没被处理，客户端应该重新在新的url发起post请求，401表示如果请求的资源已永久删除，服务器就会返回此响应，该代码与404代码类似。

8.position：static表示没有定位，元素出现在正常的流中。
9.css样式表根据所在网页的位置，可分为：行内样式表，内嵌样式表和外部样式表
10.javascript的基本数据类型有：Number，String，Boolean，Undefined，Null，复杂数据类型有：Object，Array，Function，Date,Error,RegExp,全局数据类型：Math
10.JavaScript的数据类型有：String，Number,Boolean,Array,Object,Null,Undefined

11.闭包简单来说就是一个函数能够访问外部函数的变量。

12.解释jsonp的原理并说明为什么不是真正意义上的ajax？
利用script的src访问后端的jsonp的api接口

13.Ajax的原理
Ajax的原理简单来说是通过XmlHttpRequest对象来向服务器发异步请求，从服务器获得数据，然后应用javascript来操作DOM而更新页面，其中最关键的一步是从服务器获得请求数据。XmlHttpRequest是ajax的核心机制，是支持异步请求的技术，简单的说，就是javascript可以及时向服务器提出请求和处理响应，而不阻塞用户，达到无刷新的效果。
XmlHttpRequest的属性readyState对象状态值有0,1,2,3,4,5，分别表示如下：
0（未初始化）对象已经建立，但是尚未初始化（尚未调用open方法）
1（初始化）对象已建立，尚未调用send方法
2（发送数据）send方法已经调用，但是当前的状态及http头未知
3（数据传送中）已接收部分数据，因为响应及http头不全，这时通过responseBody和resposeText获取部分数据会出现错误，
4（完成）数据接收完毕，此时可以通过resposeXml和resposeText获取完成的响应数据

14.跨域问题其实就是服务器端响应数据返回给浏览器的时候，浏览器响应头的Access-Control-Allow-Origin字段的值来判断是否有权限获取数据，一般情况下，服务器如果没有在这个字段做特殊的处理的话，跨域是没有权限访问的，所以响应数据被浏览器拦截了，因此跨域问题可以转化为数据怎么拿回客户端的问题。

15.eval()用于计算某个字符串的值，例如：
eval（“2+3”） 返回5

16.如何查看浏览器和操作系统的版本：
navigator.userAgent

17.document.write 和innerHTML的区别？
document.write是直接将内容写入页面的内容流，会导致页面全部重绘，innerHTML将内容写入某个dom节点，不会导致页面全部重绘。

18.javascript的typeof会返回那些数据类型？
1.undefined：未定义，2.boolean：布尔值，3.string：字符串，4.number：数值，5.object：对象或者null，6.function：函数

19.undefined和null的区别？
undefined表示当声明的变量还未被初始化时，变量的默认值为undefined；
null：用来表示尚未存在的对象，准备用来保存对象，但还没真正的保存对象的值，从逻辑角度看，null表示一个空对象指针。

20.HTML5中，
<q>标签定义一个短的引用；
<ins>标签定义文档的其余部分之外的插入文本；
<menu>标签定义菜单列表。当希望列出表单控件时使用该标签（HTML4不支持该标签）

21.引入CSS样式的三种方式分别是： 内联样式，即作为标记使用； 内部样式：使用style标签，将样式写入到里边去； 外部样式：使用style标签，在标签里边使用src引入，即<style src="外部样式文件"></style>

22.任何函数执行完一次，如果没有return返回值和声明变量来接收返回值的话，都会立即消失，永远找不到值。

23.跨域的方法有以下几种：1.window.name 2.document.domain(跨子域) 3.jsonp 4.ajax设置服务器代理，其中document.domain是表示将页面的document.domain设置为相同的值，页面间可以互相访问对方的JavaScript对象。

24.ajax中get请求与post请求的区别？
使用get请求时，参数需要在url中显示，而使用post请求时，则不会显示参数；
使用get请求发送的数据量小，post请求发送的数据量大；
使用get请求需要注意缓存问题，post请求不必担心这个问题；
使用get请求时，因为参数都在url里，所以send函数发送的参数为null，而post请求在使用send方法时需要赋予参’

25.浏览器三大内核：webkit，Gecko，Trident


关于es6的一些简单的语法：
1.let，const
这两个的用途与var类似，都是用来声明变量的，但在实际运用中他俩都有着各自的特殊用途。
例如：
var name = 'zach';
while(true){
    var name = 'obama';
    console.log(name); //obama
    break;
}
console.log(name) //obama


26.注册事件一般有两种方式：
obj.addEventListener("click",func,true) //捕获方式
obj.addEventListener("click",func,false) //冒泡事件

27.阻止事件冒泡：event.stopPropagation()

关于echarts的总结：

28. html5已经被移除的元素：
big，center，dir，font，frame等等


 